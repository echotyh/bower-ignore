/**
 * Bower Ignore
 * (C) 2016 Mingdong Luo (https://github.com/mdluo) | MIT License
 */

var fs = require('fs'),
    os = require('os');

var GITIGNORE = '.gitignore',
    TIP = '# Generated by bower-ignore, please DO NOT modify',
    BEGIN = '# = Bower Ignore Begin',
    END = '# = Bower Ignore End';

function split(ignoreStr) {
  var ignoreArr = ignoreStr.split(os.EOL);
  var begin = ignoreArr.indexOf(BEGIN);
  var end = ignoreArr.indexOf(END);
  if (begin >= 0 && end > 0) {
    var firsHalf = ignoreArr.splice(0, begin+1);
    var lastHalf = ignoreArr.splice(end-begin-1);
    return {firsHalf: firsHalf, lastHalf: lastHalf};
  }
  else {
    return null;
  }
}

function join() {
  var outputStr = "";
  var args = arguments;
  Array.prototype.map.call(args, function(arg, i) {
    outputStr += (arg instanceof Array) ? (arg.join(os.EOL)) : arg;
    outputStr += (i < args.length-1) ? os.EOL : '';
  });
  return outputStr;
}

exports.setGitignore = function(composedArr) {
  if (!composedArr || (composedArr instanceof Array && composedArr.length == 0)) {
    return false;
  }
  var ignoreIn, ignoreOut;
  if (fs.existsSync(GITIGNORE)) {
    try {
      ignoreIn = (fs.readFileSync(GITIGNORE)).toString();
    } catch (e) {
      return e;
    }
    var halves = split(ignoreIn);
    ignoreOut = halves ? join(halves.firsHalf, composedArr, halves.lastHalf) :
                         join(ignoreIn, TIP, BEGIN, composedArr, END, '');
  }
  else {
    ignoreOut =  join(TIP, BEGIN, composedArr, END, '');
  }
  try {
    fs.writeFileSync(GITIGNORE, ignoreOut);
  } catch (e) {
    return e;
  }
  return true;
}
